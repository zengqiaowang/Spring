<?xml version="1.0" encoding="UTF-8"?>
<!-- 1、默认命名空间;  2、xsi标准命名空间,用于指定自定义命名空间的schema文件;	3、自定义命名空间,aop是自定义命名空间的简称;	-->
<beans xmlns="http://www.springframework.org/schema/beans"		
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:jee="http://www.springframework.org/schema/jee"
    xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation="
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd
    http://www.springframework.org/schema/jee
    http://www.springframework.org/schema/jee/spring-jee-3.0.xsd" default-autowire="byName"
    default-lazy-init="true">
    
    <!-- 构造方法设置值 -->
    <!-- 
    <bean id="car1" name="car1" class="com.cybbj.reflect.domain.Car">
    	<constructor-arg index="1" type="java.lang.String" value="奔驰"></constructor-arg>
    	<constructor-arg index="2" type="java.lang.String" value="黑色"></constructor-arg>
    	<constructor-arg index="3" type="int" value="600"></constructor-arg>
    </bean>
     -->
     
    <!-- bean对象引用 -->
    <!-- 
    <bean id="car" name="car" class="com.cybbj.resourcce.bean.Car"></bean>
    <bean id="boss" name="boss" class="com.cybbj.resourcce.bean.Boss" >
    	<property name="car">
    		<ref bean="car"/>
    	</property>
    </bean>
     -->
    <!-- List,Map,Properties设值
    <bean id="boss" name="boss" class="com.cybbj.resourcce.bean.Boss" abstract="true">
    	<property name="favorite">
    		<list>
    			<value>basketball</value>
    			<value>baseball</value>
    			<value>piano</value>
    		</list>
    	</property>
    	<property name="jobMap">
    		<map>
    			<entry>
    				<key><value>job1</value></key>
    				<value>早会</value>
    			</entry>
    			<entry>
    				<key><value>job2</value></key>
    				<value>学习spring</value>
    			</entry>
    		</map>
    	</property>
    	
    	<property name="properties">
    		<props>
    			<prop key="mail1">111@139.com</prop>
    			<prop key="mail2">222@139.com</prop>
    		</props>
    	</property>
    </bean> 
     -->
    
    <!-- 集合合并测试 -->
    <!--
    <bean id="parentBoss" name="parentBoss" class="com.cybbj.resourcce.bean.ParentBoss" >
    	<property name="favorite">
    		<list merge="true">
    			<value>basketball</value>
    			<value>baseball</value>
    		</list>
    	</property>
 
    </bean>
    <bean id="childBoss" name="childBoss" parent="parentBoss" class="com.cybbj.resourcce.bean.ChildBoss">
    	<property name="favorite">
    		<list merge="true">
    			<value>write</value>
    			<value>listen</value>
    		</list>
    	</property>
    </bean>
      -->
     
    <!-- util 命名空间配合集合 
   	<util:list id="favoriteList" list-class="java.util.LinkedList">
   		<value>piano</value>
   		<value>tennis</value>
	</util:list>
	-->    
    
    <!-- lookup方法注入 -->
    <!-- prototype类型的bean -->
    <!-- 
    <bean id="car" name="car" class="com.cybbj.resourcce.bean.Car"
    	p:brand="宝马" p:color="白色" p:maxSpeed="400" scope="prototype"/>
     -->
    <!-- 实施方法注入 -->	
    <!-- 
    <bean id="magicBoss" name="magicBoss" class="com.cybbj.service.injectfun.MagicBoss">
    	<lookup-method name="getCar" bean="car"/>
    </bean>
     -->
     
    <!-- 方法替换 -->
    <!-- 
    <bean id="boss1" name="boss1" class="com.cybbj.resourcce.bean.replaceMethod.Boss1">
    	<replaced-method name="getCar" replacer="boss2"></replaced-method>
    </bean>
    <bean id="boss2" name="boss2" class="com.cybbj.resourcce.bean.replaceMethod.Boss2"></bean>
     -->
	
	<!-- 继承 -->
	<!-- 
	<bean id="abstractCar" name="abstractCar" class="com.cybbj.resourcce.bean.Car" abstract="true"
		p:brand="宝马" p:color="白色" p:maxSpeed="350"/>
	<bean id="car2" p:brand="红旗" name="car2" parent="abstractCar"></bean>
	<bean id="car3" p:brand="法拉利" name="car3" parent="abstractCar"></bean>
	 -->
	
	<!-- 测试注解 -->
	<!-- 
	<context:component-scan base-package="com.cybbj.resourcce"></context:component-scan>
	 -->
	
	<!-- ApplicationContext测试 -->
	<!-- 
	<bean class="com.cybbj.applicationContext.MailSendListener"></bean>
	<bean id="mailSender" class="com.cybbj.applicationContext.MailSender"></bean>
	 -->
	
	<!-- Proxy配置 前置与后置通知 -->
	<!-- p:proxyInterfaces指定代理的接口,多个接口使用<list>元素 -->
	<!-- p:interceptorNames 指定使用的增强-->
	<!-- p:target-ref指定增强的类 -->
	<!-- 可使用 p:interceptorNames="beforeAdvice,afterAdvice"替换  -->
	<!-- 
	<bean id="beforeAdvice" name="beforeAdvice" class="com.cybbj.aop.GreetingBeforeAdvice"></bean>
	<bean id="afterAdvice" name="afterAdvice" class="com.cybbj.aop.GreetingAfterAdvice"></bean>
	<bean id="target" name="target" class="com.cybbj.aop.NaiveWaiter"></bean>
	<bean id="waiter" class="org.springframework.aop.framework.ProxyFactoryBean"
		p:proxyInterfaces="com.cybbj.aop.Waiter"	
		p:target-ref="target"
	>		
		<property name="interceptorNames">
			<list>
				<idref local="beforeAdvice"/>
				<idref local="afterAdvice"/>
			</list>
		</property>
	</bean>
	 -->
	
	<!-- AOP alliance 环绕通知 -->
	<!-- 
	<bean id="greetingInterceptor" name="greetingInterceptor" class="com.cybbj.aop.GreetingInterceptor"></bean>
	<bean id="target" name="target" class="com.cybbj.aop.NaiveWaiter"></bean>
	<bean id="waiter" name="waiter" class="org.springframework.aop.framework.ProxyFactoryBean"
		p:proxyInterfaces="com.cybbj.aop.Waiter"
		p:target-ref="target"
		p:interceptorNames="greetingInterceptor"
	></bean>
	 -->
	
	<!-- 异常通知 -->
	<!--  
	<bean id="transactionManager" name="transactionManager" class="com.cybbj.aop.TransactionManager"></bean>
	<bean id="target" name="target" class="com.cybbj.aop.ForumService"></bean>
	<bean id="forumService" name="forumService" class="org.springframework.aop.framework.ProxyFactoryBean"
		p:interceptorNames="transactionManager"
		p:target-ref="target"
		p:proxyTargetClass="true"
	></bean>
	-->
	
	<!-- 引介增强 -->
	<!-- 
	<bean id="target" name="target" class="com.cybbj.aop.ForumService"></bean>
	<bean id="controllablePerformanceMoniter" name="controllablePerformanceMoniter" class="com.cybbj.aop.ControllablePerformanceMoniter"></bean>
	<bean id="forumService" name="forumService" class="org.springframework.aop.framework.ProxyFactoryBean"
		p:interfaces="com.cybbj.aop.Monitorable"
		p:interceptorNames="controllablePerformanceMoniter"
		p:target-ref="target"
		p:proxyTargetClass="true"
	></bean>
	 -->
	
	<!-- 静态切面引入增强 -->
	<!-- 
	<bean id="waiterTarget" name="waiterTarget" class="com.cybbj.aop.pointcut.Waiter"></bean>
	<bean id="sellerTarget" name="sellerTarget" class="com.cybbj.aop.pointcut.Seller"></bean>
	<bean id="greetingBeforeAdvice" name="greetingBeforeAdvice" class="com.cybbj.aop.pointcut.GreetingBeforeAdvice"></bean>
	<bean id="greetingAdvisor" name="greetingAdvisor" class="com.cybbj.aop.pointcut.GreetingAdvisor"
		p:advice-ref="greetingBeforeAdvice"
	></bean>
	<bean id="parent" name="parent" abstract="true" class="org.springframework.aop.framework.ProxyFactoryBean"
		p:interceptorNames="greetingAdvisor"
		p:proxyTargetClass="true"
	></bean>
	<bean id="waiter" name="waiter" parent="parent" p:target-ref="waiterTarget"></bean>
	<bean id="seller" name="seller" parent="parent" p:target-ref="sellerTarget"></bean>
	 -->
	
	<!-- 正则表达式定义静态切面 -->
	<!-- 
	<bean id="waiterTarget" name="waiterTarget" class="com.cybbj.aop.staticpointcut.Waiter"></bean>
	<bean id="sellerTarget" name="sellerTarget" class="com.cybbj.aop.staticpointcut.Seller"></bean>
	<bean id="greetingBeforeAdvice" name="greetingBeforeAdvice" class="com.cybbj.aop.staticpointcut.GreetingBeforeAdvice"></bean>
	<bean id="regexpAdvisor" name="regexpAdvisor"
		class="org.springframework.aop.support.RegexpMethodPointcutAdvisor"
		p:patterns=".*greet.*"
		p:advice-ref="greetingBeforeAdvice"
	></bean>
	<bean id="waiter" name="waiter" class="org.springframework.aop.framework.ProxyFactoryBean"
		p:interceptorNames="regexpAdvisor"
		p:target-ref="waiterTarget"
		p:proxyTargetClass="true"
	></bean>
	 -->
	
	<!-- 动态切面配置 -->
	<!-- p:proxyTargetClass="true"指定是否对类进行代理 -->
	<!-- 
	<bean id="waiterTarget" name="waiterTarget" class="com.cybbj.aop.staticpointcut.Waiter"></bean>
	<bean id="dynamicAdvisor" name="dynamicAdvisor" class="org.springframework.aop.support.DefaultPointcutAdvisor">
		<property name="pointcut">
			<bean class="com.cybbj.aop.dynamicpointcut.GreetingDynamicMatcherPointcut"></bean>
		</property>
		<property name="advice">
			<bean class="com.cybbj.aop.GreetingBeforeAdvice"></bean>
		</property>
	</bean>
	<bean id="waiter" name="waiter" class="org.springframework.aop.framework.ProxyFactoryBean"
		p:interceptorNames="dynamicAdvisor"
		p:target-ref="waiterTarget"
		p:proxyTargetClass="true"
	></bean>
 	-->	
 	
 	<!-- 配置控制流程切面 -->
 	<!-- constructor-arg type="java.lang.Class"指定流程切点的类 -->
 	<!-- constructor-arg type="java.lang.String"指定流程切点的方法 -->
 	<!-- 
 	<bean id="greetingAdvice" name="greetingAdvice" class="com.cybbj.aop.staticpointcut.GreetingBeforeAdvice"></bean>
 	<bean id="waiterTarget" name="waiterTarget" class="com.cybbj.aop.staticpointcut.Waiter"></bean>
 	<bean id="controlFlowPointcut" name="controlFlowPointcut" class="org.springframework.aop.support.ControlFlowPointcut">
 		<constructor-arg type="java.lang.Class" value="com.cybbj.aop.flowpointcut.WaiterDelegate"></constructor-arg>
 		<constructor-arg type="java.lang.String" value="service"></constructor-arg>
 	</bean>
 	<bean id="controlFlowAdvisor" name="controlFlowAdvisor"
 		class="org.springframework.aop.support.DefaultPointcutAdvisor"
 		p:pointcut-ref="controlFlowPointcut"
 		p:advice-ref="greetingAdvice"
 	></bean>
 	<bean id="waiter" name="waiter" class="org.springframework.aop.framework.ProxyFactoryBean"
 		p:interceptorNames="controlFlowAdvisor"
 		p:proxyTargetClass="true"
 		p:target-ref="waiterTarget"
 	
 	></bean>
 	 -->
 	
 	<!-- BeanNameAutoProxyCreator创建代理 -->
 	<!-- 
 	<bean id="waiter" name="waiter" class="com.cybbj.aop.staticpointcut.Waiter"></bean>
 	<bean id="seller" name="seller" class="com.cybbj.aop.staticpointcut.Seller"></bean>
 	<bean id="greetingAdvice" name="greetingAdvice" class="com.cybbj.aop.staticpointcut.GreetingBeforeAdvice"></bean>
 	<bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator"
 		p:beanNames="*er"
 		p:interceptorNames="greetingAdvice"
 		p:optimize="true"
 	
 	></bean>
 	 -->
 	
 	<!-- DefaultAdvisorAutoProxyCreator创建代理 -->
 	<bean id="waiter" name="waiter" class="com.cybbj.aop.staticpointcut.Waiter"></bean>
 	<bean id="seller" name="seller" class="com.cybbj.aop.staticpointcut.Seller"></bean>
 	<bean id="greetingAdvice" name="greetingAdvice" class="com.cybbj.aop.staticpointcut.GreetingBeforeAdvice"></bean>
 	<bean id="regexpAdvisor" name="regexpAdvisor"
 		class="org.springframework.aop.support.RegexpMethodPointcutAdvisor"
 		p:advice-ref="greetingAdvice"
 		p:pattern=".*greet.*"
 	></bean>
 	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"></bean>
 	
 	
 	
	
	
	
</beans>